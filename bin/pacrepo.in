#!/bin/bash
#
# Usage: pacrepo [repo] <pacman args>
#

. @libexecdir@/parcman/bootstrap.sh

config="$CONFIG"
if [[ ! -r "$config" ]]; then
	err "Could not read config file %s" "$config"
	exit 1
elif egrep -q "^[[:space:]]*\[$1\][[:space:]]*$" "$config"; then
	repo="$1"
	shift
elif egrep -q "^[[:space:]]*\[$REPO\][[:space:]]*$" "$config"; then
	repo="$REPO"
else
	err "Repo not found on command line or in %s" "$config"
	exit 1
fi

parse_config() {
	local repo config
	repo="$1"
	config="$2"

	# extract repo from config
	awk '
		BEGIN { p = 0 }
		$1 != "['"$repo"']" && $1 != "[options]" \
			&& /^[[:space:]]*\[[^]]*\][[:space:]]*$/ { p = 0 }
		$1 == "['"$repo"']" || $1 == "[options]"     { p = 1 }
		p == 1 { print }
	' "$config"
}

tmpconfig="$(mktemp --tmpdir "pacconfig-${config##*/}.XXXXXX")" \
	|| exit 1
trap 'rm -f "$tmpconfig"' EXIT

parse_config "$repo" "$config" > "$tmpconfig"

pacman "$@" --config="$tmpconfig"

exit $?

#!/bin/bash
# add or remove a package to or from a custom repository

add_pkg() {
	# check for proper arguments
	if [[ "$file" = "" || "$1" == "--help" || "$1" == "-h" ]]; then
	    err "Usage: %s <package>\n\n    Add <package> to repository.\n" "$prog"
	    exit 1
	elif [[ ! -f "$file" ]]; then
		err "%s is not a valid file" "$file"
		exit 1
	elif [[ "$file" = $pkg ]]; then
		err "%s has an invalid package extension" "$file"
		exit 1
	fi

	if [[ "$HOST" == "" ]]; then
		# remove old versions of the package
		rm -vf -- $REPO/$pkg-*.pkg.tar.xz

		# add package to the repo
		msg "Adding %s to repo..." "$file"
		cp -v -- "$file" "$REPO/" \
			&& repo-add "$db" "$REPO/$(basename "$file")"
	else
		# remove old versions of the package
		ssh -- "$HOST" rm -vf -- $REPO/$pkg-*.pkg.tar.xz || exit $?

		# add package to the repo
		msg "Adding %s to repo..." "$file"
		scp -- "$file" "$HOST:$REPO/" \
			&& ssh -- "$HOST" repo-add "$db" "$REPO/$(basename "$file")"

	fi

}

rm_pkg() {
	# check for proper arguments
	if [[ "$pkg" = "" || "$1" == "--help" || "$1" == "-h" ]]; then
	    err "Usage: %s <package>\n\n    Remove <package> from repository.\n" "$prog"
	    exit 1
	fi

	if [[ "$HOST" == "" ]]; then
		# remove all versions of the package
		rm -vf -- $files
		# add package to the repo
		repo-remove "$db" "$pkg"
	else
		# remove all versions of the package
		# add package to the repo
		ssh -- "$HOST" "rm -vf -- $files; repo-remove \"$db\" \"$pkg\""
	fi
}

if [[ -f @sysconfdir@/pacrepo.conf ]]; then
	. @sysconfdir@/pacrepo.conf
fi

REPO="${REPO-/srv/repo}"
CONFIG="${CONFIG-"@sysconfdir@/pacman.conf"}"

sec_pre='[[:space:]]*\['
sec_post='\][[:space:]]*'
reponames=( $(sed -nr "/^$sec_pre.*$sec_post$/ s/^$sec_pre|$sec_post$//gp" "$CONFIG") )

prog="$(basename "$0")"
file="$1"
repo="${2-${reponames[${#reponames[@]}-1]}}" # use last configured repo if none given
pkg="$(basename -- "${file%-*-*-*.pkg.tar.xz}")"
files="$REPO/$pkg"-*.pkg.*
db="$REPO/$repo.db.tar.gz"

# make sure a valid repo is configured
if [[ "$repo" = "" ]]; then
	err "No valid repo found"
	exit 1
fi

case "$prog" in
  addpkg) add_pkg "$@" ;;
  rmpkg)  rm_pkg "$@" ;;
  *)      pacman "$@" --config="$CONFIG" ;;
esac

